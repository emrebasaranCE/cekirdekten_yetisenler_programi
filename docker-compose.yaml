version: '3.8'

services:
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - ./data/rabbitmq_data:/var/lib/rabbitmq
    networks:
      - air_pollution_net
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 15s

  mongodb:
    image: mongo:latest
    container_name: mongodb
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: rootpassword
      MONGO_INITDB_DATABASE: air_pollution
    volumes:
      - ./data/mongodb_data:/data/db
    networks:
      - air_pollution_net
    healthcheck:
      test: ["CMD-SHELL", "mongosh --quiet --eval \"db.adminCommand({ ping: 1 })\" -u root -p rootpassword --authenticationDatabase admin || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 15s

  data_collector:
    build:
      context: ./backend/data_collector
    container_name: data_collector
    restart: always
    depends_on:
      - rabbitmq
    ports:
      - "5001:5001"
    environment:
      HOST: 0.0.0.0
      PORT: 5001
      DEBUG: "False"
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: guest
      RABBITMQ_PASS: guest
      POLLUTION_DATA_QUEUE: pollution_data_queue
    networks:
      - air_pollution_net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 15s

  data_processor:
    build:
      context: ./backend/data_processor
    container_name: data_processor
    restart: always
    depends_on:
      - rabbitmq
      - mongodb
    ports:
      - "5002:5002"
    environment:
      HOST: 0.0.0.0
      PORT: 5002
      DEBUG: "False"
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: guest
      RABBITMQ_PASS: guest
      POLLUTION_DATA_QUEUE: pollution_data_queue
      ANOMALY_QUEUE: anomaly_notification_queue
      MONGODB_HOST: mongodb
      MONGODB_PORT: 27017
      MONGODB_USER: root
      MONGODB_PASS: rootpassword
      MONGODB_DB: air_pollution
    networks:
      - air_pollution_net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5002/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 15s

  notification_service:
    build:
      context: ./backend/notification_service
    container_name: notification_service
    restart: always
    depends_on:
      - rabbitmq
      - mongodb
    ports:
      - "5003:5003"
    environment:
      HOST: 0.0.0.0
      PORT: 5003
      DEBUG: "False"
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: guest
      RABBITMQ_PASS: guest
      ANOMALY_QUEUE: anomaly_notification_queue
      USER_NOTIFICATION_QUEUE: user_notification_queue
      MONGODB_HOST: mongodb
      MONGODB_PORT: 27017
      MONGODB_USER: root
      MONGODB_PASS: rootpassword
      MONGODB_DB: air_pollution
    networks:
      - air_pollution_net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5003/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 15s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    restart: always
    depends_on:
      - notification_service
    ports:
      - "80:80"
    networks:
      - air_pollution_net

volumes:
  rabbitmq_data:
  mongodb_data:

networks:
  air_pollution_net:
    driver: bridge
